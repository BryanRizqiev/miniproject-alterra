// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	dto "miniproject-alterra/module/dto"
	event_entity "miniproject-alterra/module/events/entity"

	mock "github.com/stretchr/testify/mock"
)

// EventReposistory is an autogenerated mock type for the IEventReposistory type
type EventReposistory struct {
	mock.Mock
}

// DeleteEvent provides a mock function with given fields: event
func (_m *EventReposistory) DeleteEvent(event dto.Event) error {
	ret := _m.Called(event)

	var r0 error
	if rf, ok := ret.Get(0).(func(dto.Event) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindEvent provides a mock function with given fields: eventId
func (_m *EventReposistory) FindEvent(eventId string) (dto.Event, error) {
	ret := _m.Called(eventId)

	var r0 dto.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (dto.Event, error)); ok {
		return rf(eventId)
	}
	if rf, ok := ret.Get(0).(func(string) dto.Event); ok {
		r0 = rf(eventId)
	} else {
		r0 = ret.Get(0).(dto.Event)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(eventId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOwnEvent provides a mock function with given fields: userId, eventId
func (_m *EventReposistory) FindOwnEvent(userId string, eventId string) (dto.Event, error) {
	ret := _m.Called(userId, eventId)

	var r0 dto.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (dto.Event, error)); ok {
		return rf(userId, eventId)
	}
	if rf, ok := ret.Get(0).(func(string, string) dto.Event); ok {
		r0 = rf(userId, eventId)
	} else {
		r0 = ret.Get(0).(dto.Event)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userId, eventId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllEvent provides a mock function with given fields:
func (_m *EventReposistory) GetAllEvent() ([]dto.Event, error) {
	ret := _m.Called()

	var r0 []dto.Event
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]dto.Event, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []dto.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Event)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEvent provides a mock function with given fields:
func (_m *EventReposistory) GetEvent() ([]dto.Event, error) {
	ret := _m.Called()

	var r0 []dto.Event
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]dto.Event, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []dto.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Event)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWaitingEvents provides a mock function with given fields:
func (_m *EventReposistory) GetWaitingEvents() ([]dto.Event, error) {
	ret := _m.Called()

	var r0 []dto.Event
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]dto.Event, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []dto.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Event)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertEvent provides a mock function with given fields: eventD
func (_m *EventReposistory) InsertEvent(eventD event_entity.EventDTO) (dto.Event, error) {
	ret := _m.Called(eventD)

	var r0 dto.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(event_entity.EventDTO) (dto.Event, error)); ok {
		return rf(eventD)
	}
	if rf, ok := ret.Get(0).(func(event_entity.EventDTO) dto.Event); ok {
		r0 = rf(eventD)
	} else {
		r0 = ret.Get(0).(dto.Event)
	}

	if rf, ok := ret.Get(1).(func(event_entity.EventDTO) error); ok {
		r1 = rf(eventD)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEvent provides a mock function with given fields: event
func (_m *EventReposistory) UpdateEvent(event dto.Event) (dto.Event, error) {
	ret := _m.Called(event)

	var r0 dto.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.Event) (dto.Event, error)); ok {
		return rf(event)
	}
	if rf, ok := ret.Get(0).(func(dto.Event) dto.Event); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Get(0).(dto.Event)
	}

	if rf, ok := ret.Get(1).(func(dto.Event) error); ok {
		r1 = rf(event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEventStatus provides a mock function with given fields: event, status
func (_m *EventReposistory) UpdateEventStatus(event dto.Event, status string) error {
	ret := _m.Called(event, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(dto.Event, string) error); ok {
		r0 = rf(event, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateImage provides a mock function with given fields: fileName, event
func (_m *EventReposistory) UpdateImage(fileName string, event dto.Event) error {
	ret := _m.Called(fileName, event)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, dto.Event) error); ok {
		r0 = rf(fileName, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRecommendedAction provides a mock function with given fields: event, value
func (_m *EventReposistory) UpdateRecommendedAction(event dto.Event, value string) error {
	ret := _m.Called(event, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(dto.Event, string) error); ok {
		r0 = rf(event, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewEventReposistory creates a new instance of EventReposistory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventReposistory(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventReposistory {
	mock := &EventReposistory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
