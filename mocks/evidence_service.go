// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	dto "miniproject-alterra/module/dto"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// EvidenceService is an autogenerated mock type for the IEvidenceService type
type EvidenceService struct {
	mock.Mock
}

// CreateEvidence provides a mock function with given fields: userId, eventId, image, evidence
func (_m *EvidenceService) CreateEvidence(userId string, eventId string, image multipart.File, evidence dto.Evidence) error {
	ret := _m.Called(userId, eventId, image, evidence)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, multipart.File, dto.Evidence) error); ok {
		r0 = rf(userId, eventId, image, evidence)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteEvidence provides a mock function with given fields: userId, evidenceId
func (_m *EvidenceService) DeleteEvidence(userId string, evidenceId string) error {
	ret := _m.Called(userId, evidenceId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userId, evidenceId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetEvidences provides a mock function with given fields: eventId
func (_m *EvidenceService) GetEvidences(eventId string) ([]dto.Evidence, error) {
	ret := _m.Called(eventId)

	var r0 []dto.Evidence
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]dto.Evidence, error)); ok {
		return rf(eventId)
	}
	if rf, ok := ret.Get(0).(func(string) []dto.Evidence); ok {
		r0 = rf(eventId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Evidence)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(eventId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEvidence provides a mock function with given fields: userId, evidenceId, payload
func (_m *EvidenceService) UpdateEvidence(userId string, evidenceId string, payload dto.Evidence) error {
	ret := _m.Called(userId, evidenceId, payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, dto.Evidence) error); ok {
		r0 = rf(userId, evidenceId, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateImage provides a mock function with given fields: userId, evidenceId, filename, image
func (_m *EvidenceService) UpdateImage(userId string, evidenceId string, filename string, image multipart.File) error {
	ret := _m.Called(userId, evidenceId, filename, image)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, multipart.File) error); ok {
		r0 = rf(userId, evidenceId, filename, image)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewEvidenceService creates a new instance of EvidenceService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEvidenceService(t interface {
	mock.TestingT
	Cleanup(func())
}) *EvidenceService {
	mock := &EvidenceService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
