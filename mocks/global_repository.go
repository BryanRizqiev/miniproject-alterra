// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	dto "miniproject-alterra/module/dto"

	mock "github.com/stretchr/testify/mock"
)

// GlobalRepo is an autogenerated mock type for the IGlobalRepository type
type GlobalRepo struct {
	mock.Mock
}

// GetUser provides a mock function with given fields: userId
func (_m *GlobalRepo) GetUser(userId string) (dto.User, error) {
	ret := _m.Called(userId)

	var r0 dto.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (dto.User, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(string) dto.User); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(dto.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGlobalRepo creates a new instance of GlobalRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGlobalRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *GlobalRepo {
	mock := &GlobalRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
