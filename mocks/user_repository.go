// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	dto "miniproject-alterra/module/dto"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepositoryInterface type
type UserRepository struct {
	mock.Mock
}

// CheckUserVerifiedEmail provides a mock function with given fields: userId
func (_m *UserRepository) CheckUserVerifiedEmail(userId string) (bool, error) {
	ret := _m.Called(userId)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: user
func (_m *UserRepository) DeleteUser(user dto.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(dto.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindUser provides a mock function with given fields: userId
func (_m *UserRepository) FindUser(userId string) (dto.User, error) {
	ret := _m.Called(userId)

	var r0 dto.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (dto.User, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(string) dto.User); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(dto.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllUser provides a mock function with given fields:
func (_m *UserRepository) GetAllUser() ([]dto.User, error) {
	ret := _m.Called()

	var r0 []dto.User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]dto.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []dto.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRequestingUser provides a mock function with given fields:
func (_m *UserRepository) GetRequestingUser() ([]dto.User, error) {
	ret := _m.Called()

	var r0 []dto.User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]dto.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []dto.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmail provides a mock function with given fields: email
func (_m *UserRepository) GetUserByEmail(email string) (dto.User, error) {
	ret := _m.Called(email)

	var r0 dto.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (dto.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) dto.User); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(dto.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertUser provides a mock function with given fields: user
func (_m *UserRepository) InsertUser(user dto.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(dto.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePhoto provides a mock function with given fields: fileName, user
func (_m *UserRepository) UpdatePhoto(fileName string, user dto.User) error {
	ret := _m.Called(fileName, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, dto.User) error); ok {
		r0 = rf(fileName, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: user
func (_m *UserRepository) UpdateUser(user dto.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(dto.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserRequestVerified provides a mock function with given fields: userId
func (_m *UserRepository) UpdateUserRequestVerified(userId string) error {
	ret := _m.Called(userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserRole provides a mock function with given fields: userId, role
func (_m *UserRepository) UpdateUserRole(userId string, role string) error {
	ret := _m.Called(userId, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userId, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserVerifiedEmail provides a mock function with given fields: userId
func (_m *UserRepository) UpdateUserVerifiedEmail(userId string) error {
	ret := _m.Called(userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
