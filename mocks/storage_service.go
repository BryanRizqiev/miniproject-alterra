// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// StorageService is an autogenerated mock type for the StorageServiceInterface type
type StorageService struct {
	mock.Mock
}

// DeleteFile provides a mock function with given fields: bucketName, fileName
func (_m *StorageService) DeleteFile(bucketName string, fileName string) error {
	ret := _m.Called(bucketName, fileName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(bucketName, fileName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUrl provides a mock function with given fields: bucketName, fileName
func (_m *StorageService) GetUrl(bucketName string, fileName string) (string, error) {
	ret := _m.Called(bucketName, fileName)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(bucketName, fileName)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(bucketName, fileName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(bucketName, fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadFile provides a mock function with given fields: bucketName, fileName, body
func (_m *StorageService) UploadFile(bucketName string, fileName string, body io.Reader) error {
	ret := _m.Called(bucketName, fileName, body)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, io.Reader) error); ok {
		r0 = rf(bucketName, fileName, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStorageService creates a new instance of StorageService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorageService(t interface {
	mock.TestingT
	Cleanup(func())
}) *StorageService {
	mock := &StorageService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
