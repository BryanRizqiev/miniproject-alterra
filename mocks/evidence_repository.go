// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	dto "miniproject-alterra/module/dto"

	mock "github.com/stretchr/testify/mock"
)

// EvidenceRepository is an autogenerated mock type for the IEvidenceRepository type
type EvidenceRepository struct {
	mock.Mock
}

// DeleteEvidence provides a mock function with given fields: event
func (_m *EvidenceRepository) DeleteEvidence(event dto.Evidence) error {
	ret := _m.Called(event)

	var r0 error
	if rf, ok := ret.Get(0).(func(dto.Evidence) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindEvidence provides a mock function with given fields: evidenceId
func (_m *EvidenceRepository) FindEvidence(evidenceId string) (dto.Evidence, error) {
	ret := _m.Called(evidenceId)

	var r0 dto.Evidence
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (dto.Evidence, error)); ok {
		return rf(evidenceId)
	}
	if rf, ok := ret.Get(0).(func(string) dto.Evidence); ok {
		r0 = rf(evidenceId)
	} else {
		r0 = ret.Get(0).(dto.Evidence)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(evidenceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOwnEvidence provides a mock function with given fields: userId, evidenceId
func (_m *EvidenceRepository) FindOwnEvidence(userId string, evidenceId string) (dto.Evidence, error) {
	ret := _m.Called(userId, evidenceId)

	var r0 dto.Evidence
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (dto.Evidence, error)); ok {
		return rf(userId, evidenceId)
	}
	if rf, ok := ret.Get(0).(func(string, string) dto.Evidence); ok {
		r0 = rf(userId, evidenceId)
	} else {
		r0 = ret.Get(0).(dto.Evidence)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userId, evidenceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEvidences provides a mock function with given fields: eventId
func (_m *EvidenceRepository) GetEvidences(eventId string) ([]dto.Evidence, error) {
	ret := _m.Called(eventId)

	var r0 []dto.Evidence
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]dto.Evidence, error)); ok {
		return rf(eventId)
	}
	if rf, ok := ret.Get(0).(func(string) []dto.Evidence); ok {
		r0 = rf(eventId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Evidence)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(eventId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertEvidence provides a mock function with given fields: evidence
func (_m *EvidenceRepository) InsertEvidence(evidence dto.Evidence) error {
	ret := _m.Called(evidence)

	var r0 error
	if rf, ok := ret.Get(0).(func(dto.Evidence) error); ok {
		r0 = rf(evidence)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateEvidence provides a mock function with given fields: evidence
func (_m *EvidenceRepository) UpdateEvidence(evidence dto.Evidence) error {
	ret := _m.Called(evidence)

	var r0 error
	if rf, ok := ret.Get(0).(func(dto.Evidence) error); ok {
		r0 = rf(evidence)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateImage provides a mock function with given fields: fileName, evidence
func (_m *EvidenceRepository) UpdateImage(fileName string, evidence dto.Evidence) error {
	ret := _m.Called(fileName, evidence)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, dto.Evidence) error); ok {
		r0 = rf(fileName, evidence)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewEvidenceRepository creates a new instance of EvidenceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEvidenceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *EvidenceRepository {
	mock := &EvidenceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
